name: "Execute Terraform & Terragrunt with AWS OIDC"
description: "Sets up Just, Terraform, Terragrunt, and configures AWS OIDC authentication"
inputs:
  just_version:
    description: "Version of Just to install"
    required: false
    default: "1.0.0"
  tf_version:
    description: "Version of Terraform to install"
    required: false
    default: "1.5.7"
  tg_version:
    description: "Version of Terragrunt to install"
    required: false
    default: "0.51.5"
  aws_oidc_role_arn:
    description: "AWS OIDC Role to assume"
    required: true
  aws_region:
    description: "AWS Region"
    required: true
  tg_directory:
    description: "Module directory to preform action upon"
    required: true
  tg_action:
    description: "Terragrunt action to perform (`apply` or `destroy`)"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install Just
      uses: extractions/setup-just@v2
      with:
        just-version: ${{ inputs.just_version }}

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.tf_version }}
        terraform_wrapper: false

    - name: Install Terragrunt
      uses: autero1/action-terragrunt@v1.3.2
      with:
        terragrunt_version: ${{ inputs.tg_version }}

    - name: Configure AWS OIDC Authentication
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws_oidc_role_arn }}
        aws-region: ${{ inputs.aws_region }}

    - name: Set up Terraform Cache vars
      shell: bash
      run: |
        export TF_CACHE_DIR="${{ github.workspace }}/${{ inputs.tg_directory }}/.terragrunt-cache"
        echo "TF_CACHE_DIR=${TF_CACHE_DIR}" >> $GITHUB_ENV

        export TF_PLUGIN_CACHE_DIR="${{ github.workspace }}/${{ inputs.tg_directory }}/.plugin-cache"
        echo "TF_PLUGIN_CACHE_DIR=${TF_PLUGIN_CACHE_DIR}" >> $GITHUB_ENV
        mkdir -p "${TF_PLUGIN_CACHE_DIR}"

    - name: Determine Cache Key
      id: cache-key
      shell: bash
      run: |
        CACHE_KEY=$(just get-cache-key ${{ runner.os }} ${{ inputs.tg_directory }})
        echo "CACHE_KEY=${CACHE_KEY}"
        echo "CACHE_KEY=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "CACHE_KEY=${CACHE_KEY}" >> $GITHUB_ENV

    - name: Restore Terraform Cache
      id: cache-restore
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.TF_CACHE_DIR }}
          ${{ env.TF_PLUGIN_CACHE_DIR }}
        key: ${{ steps.cache-key.outputs.CACHE_KEY }}
        restore-keys: terraform-${{ runner.os }}-

    - name: Cache Hit Output
      shell: bash
      run: |
        echo "Cache Hit: ${{ steps.cache-restore.outputs.cache-hit }}"
        echo "CACHE_HIT=${{ steps.cache-restore.outputs.cache-hit }}" >> $GITHUB_ENV

    - name: TF_CACHE_DIR
      shell: bash
      working-directory: ${{ inputs.tg_directory }}
      run: |
        ls ${{ env.TF_CACHE_DIR }} -a
 
    - name: TF_PLUGIN_CACHE_DIR
      shell: bash
      working-directory: ${{ inputs.tg_directory }}
      run: |
        ls ${{ env.TF_PLUGIN_CACHE_DIR }}/registry.terraform.io -a


    - name: Init Terragrunt
      # if: steps.cache-restore.outputs.cache-hit != 'true'
      shell: bash
      env:
        TF_LOG: TRACE
      working-directory: ${{ inputs.tg_directory }}
      run: |
        terragrunt init
 
    # - name: Action Terragrunt
    #   shell: bash
    #   working-directory: ${{ inputs.tg_directory }}
    #   run: |
    #     terragrunt ${{ inputs.tg_action }} -auto-approve -compact-warnings --terragrunt-no-auto-init

