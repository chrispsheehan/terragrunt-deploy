name: "Execute Terraform & Terragrunt with AWS OIDC"
description: "Sets up Just, Terraform, Terragrunt, and configures AWS OIDC authentication"
inputs:
  just_version:
    description: "Version of Just to install"
    required: false
    default: "1.0.0"
  tf_version:
    description: "Version of Terraform to install"
    required: false
    default: "1.10.5"
  tg_version:
    description: "Version of Terragrunt to install"
    required: false
    default: "0.51.5"
  aws_oidc_role_arn:
    description: "AWS OIDC Role to assume"
    required: true
  aws_region:
    description: "AWS Region"
    required: true
  tg_directory:
    description: "Module directory to preform action upon"
    required: true
  tg_action:
    description: "Terragrunt action to perform (`apply` or `destroy`)"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install Just
      uses: extractions/setup-just@v2
      with:
        just-version: ${{ inputs.just_version }}

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.tf_version }}
        terraform_wrapper: false

    - name: Install Terragrunt
      uses: autero1/action-terragrunt@v1.3.2
      with:
        terragrunt_version: ${{ inputs.tg_version }}

    - name: Configure AWS OIDC Authentication
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws_oidc_role_arn }}
        aws-region: ${{ inputs.aws_region }}

    - name: Set up Terraform Cache vars
      shell: bash
      run: |
        export TF_CACHE_DIR="${{ github.workspace }}/${{ inputs.tg_directory }}/.terragrunt-cache"
        echo "TF_CACHE_DIR=${TF_CACHE_DIR}" >> $GITHUB_ENV

        export TF_PLUGIN_CACHE_DIR="${{ github.workspace }}/${{ inputs.tg_directory }}/.plugin-cache"
        echo "TF_PLUGIN_CACHE_DIR=${TF_PLUGIN_CACHE_DIR}" >> $GITHUB_ENV
        mkdir -p "${TF_PLUGIN_CACHE_DIR}"

    - name: Configure Terraform Plugin Cache
      shell: bash
      run: |
        echo 'plugin_cache_dir = "${TF_PLUGIN_CACHE_DIR}"' > $HOME/.terraformrc


    - name: Determine Cache Key
      id: cache-key
      shell: bash
      run: |
        CACHE_KEY=$(just get-cache-key ${{ runner.os }} ${{ inputs.tg_directory }})
        echo "CACHE_KEY=${CACHE_KEY}"
        echo "CACHE_KEY=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "CACHE_KEY=${CACHE_KEY}" >> $GITHUB_ENV

    - name: Restore Terraform Cache
      id: cache-restore
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.TF_CACHE_DIR }}
          ${{ env.TF_PLUGIN_CACHE_DIR }}
        key: ${{ steps.cache-key.outputs.CACHE_KEY }}
        restore-keys: terraform-${{ runner.os }}-

    - name: List Terraform State Files (Before Deletion)
      id: check_state_files
      shell: bash
      run: |
        echo "🔍 Searching for Terraform state files before deletion..."

        if [[ ! -d "${{ env.TF_CACHE_DIR }}" ]]; then
          echo "Terraform cache directory does not exist. Skipping state file check."
          echo "state_count=0" >> "$GITHUB_OUTPUT"
        else
          STATE_FILES=$(find ${{ env.TF_CACHE_DIR }} -type f -name "terraform.tfstate*")
          if [[ -z "$STATE_FILES" ]]; then
            echo "✅ No Terraform state files found."
            echo "state_count=0" >> "$GITHUB_OUTPUT"
          else
            echo "$STATE_FILES"
            echo "state_count=$(echo "$STATE_FILES" | wc -l)" >> "$GITHUB_OUTPUT"
            echo "state_files=$STATE_FILES" >> "$GITHUB_OUTPUT"
          fi
        fi

    - name: Delete Terraform State Files (If Found)
      if: ${{ steps.check_state_files.outputs.state_count > 0 }}
      shell: bash
      run: |
        echo "🚨 Deleting Terraform state files..."
        STATE_FILES=${{ steps.check_state_files.outputs.state_files }}

        echo "Files to be deleted:"
        echo "$STATE_FILES"
        echo "$STATE_FILES" | xargs rm -f
        echo "✅ Terraform state files deleted successfully."

    - name: Cache Hit Output
      shell: bash
      run: |
        echo "Cache Hit: ${{ steps.cache-restore.outputs.cache-hit }}"
        echo "CACHE_HIT=${{ steps.cache-restore.outputs.cache-hit }}" >> $GITHUB_ENV
 
    - name: Action Terragrunt
      shell: bash
      working-directory: ${{ inputs.tg_directory }}
      run: |
        terragrunt ${{ inputs.tg_action }} -auto-approve -compact-warnings

    - name: Delete Terraform State Files
      shell: bash
      run: |
        STATE_FILES=$(find ${{ env.TF_CACHE_DIR }} -type f -name "terraform.tfstate*")

        echo "Files to be deleted:"
        echo "$STATE_FILES"
        echo "$STATE_FILES" | xargs rm -f
        echo "✅ Terraform state files deleted successfully."
