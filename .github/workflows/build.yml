name: Build and Push Lambda code
description: Build Python code, zip and then push to s3 bucket

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      version:
        description: "Version of code to be built"
        required: true
        type: string
  
permissions:
  id-token: write
  contents: read

jobs:
  bucket:
    environment:
      name: ${{inputs.environment}}
    runs-on: ubuntu-latest
    outputs:
      bucket_name: ${{ steps.get_bucket.outputs.bucket_name }}
    steps:
      - uses: actions/checkout@v4
      - id: terragrunt_action
        uses: ./.github/actions/terragrunt_action
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          aws_region: ${{ vars.AWS_REGION }}
          tg_directory: infra/live/${{inputs.environment}}/aws/bucket
          tg_action: apply
      - name: Get Bucket
        id: get_bucket
        env:
          TG_OUTPUTS: ${{ steps.terragrunt_action.outputs.tg_outputs  }}
        run: |
          echo "bucket_name=$(echo $TG_OUTPUTS | jq -r '.bucket_name.value')" >> $GITHUB_OUTPUT

  build-zip:
    needs: bucket
    environment:
      name: ${{inputs.environment}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build_lambda_zip
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          aws_region: ${{ vars.AWS_REGION }}
          s3_bucket: ${{ needs.bucket.outputs.bucket_name}}
          version: ${{ inputs.version }}

  ecr:
    environment:
      name: ${{inputs.environment}}
    runs-on: ubuntu-latest
    outputs:
      ecr_repo_name: ${{ steps.get_bucket.outputs.bucket_name }}
    steps:
      - uses: actions/checkout@v4
      - id: terragrunt_action
        uses: ./.github/actions/terragrunt_action
        with:
          aws_oidc_role_arn: ${{ vars.AWS_OIDC_ROLE_ARN }}
          aws_region: ${{ vars.AWS_REGION }}
          tg_directory: infra/live/${{inputs.environment}}/aws/ecr
          tg_action: apply
      - name: Get ECR
        id: get_bucket
        env:
          TG_OUTPUTS: ${{ steps.terragrunt_action.outputs.tg_outputs  }}
        run: |
          echo "ecr_repo_name=$(echo $TG_OUTPUTS | jq -r '.ecr_repo_name')" >> $GITHUB_OUTPUT

  image:
    needs: ecr
    environment:
      name: ${{inputs.environment}}
    runs-on: ubuntu-latest
    steps:
      - run: echo "ecr ${{ needs.ecr.outputs.ecr_repo_name }}""