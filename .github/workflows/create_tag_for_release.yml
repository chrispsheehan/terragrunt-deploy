name: Create new version release

on:
  push:
    branches:
      - main
    paths:
      - "pyproject.toml"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PYTHON_VERSION: 3.11
  POETRY_VERSION: 1.8.3

jobs:
  toml-version:
    runs-on: ubuntu-latest
    outputs:
        version: ${{ steps.get-toml-version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Poetry ${{ env.POETRY_VERSION }}
        shell: bash
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Check version tag does not exist
        id: get-toml-version
        run: |
          package_version="v$(poetry version -s)"
          echo "VERSION=$package_version" >> "$GITHUB_OUTPUT"

  validate:
    needs:
      - toml-version
    runs-on: ubuntu-latest
    outputs:
        release: ${{ steps.check-tag.outputs.RELEASE }}
        tag: ${{ steps.set-tag.outputs.TAG }}
    env:
        TOML_VERSION: ${{ needs.toml-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0
      
      - name: Set tag string
        id: set-tag
        run: |
          TAG=$(echo "$TOML_VERSION" | sed 's/^v//')
          echo "tag is $TAG"
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
          
      - name: Check tag does not already exist
        id: check-tag
        run: |
          TAG="${{ steps.set-tag.outputs.TAG }}"

          if [[ -z "$TAG" ]]; then
            echo "::error::TAG is empty, something went wrong."
            exit 1
          fi

          echo "Checking for tag: $TAG"
          CHECKED_TAG=$(git tag -l "$TAG")

          if [[ "$CHECKED_TAG" == "$TAG" ]]; then
            echo "::warning::Tag $TAG already exists, skipping tag creation."
            echo "RELEASE=false" >> "$GITHUB_OUTPUT"
          else
            echo "Tag $TAG does not exist."
            echo "RELEASE=true" >> "$GITHUB_OUTPUT"
          fi

  create-release:
    needs: validate
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.validate.outputs.tag }}
    if: ${{ needs.validate.outputs.release == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Create new tag
        run: |
          echo "Tagging $TAG"
          git tag "$TAG"
          git push origin --tag "$TAG"

  run-release:
    needs:
      - validate
      - create-release
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.validate.outputs.tag }}
    if: ${{ needs.validate.outputs.release == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Trigger release workflow
        run: |
          gh workflow run release.yml --ref "$TAG" --field version="$TAG"